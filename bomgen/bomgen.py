# bomgen.py
# devel@latke.net
# modified 2013-11-05
# modified 2014-12-30
# modified 2015-01-06, output includes the part value
# modified 2015-01-20, flag parts in BOM but not in master parts list
# modified 2017-02-18, build part number for oscillator from PN and value, like with R, L, C
#
# This Python script reads a BOM file generated by Kicad and looks up each entry
# in a master parts list. Both the BOM and the parts list are CSV files.
#
# The original BOM has one entry per part on the board. Obviously there can be many
# duplicate parts, so we have to consolidate the BOM into part number, count and a
# list of reference designators for each part number.
#
# Finally, the part number needs to be replaced by an orderable vendor part number.
#
# This takes two command-line arguments: 
# The first is the csv BOM. 
# The second is the csv of the parts database.

import csv
import sys

# open the BOM file and create a reader for it.
#bomFile = 'MonitorController-by-ref.csv'
bomFile = sys.argv[1]
print 'Reading BOM file ', bomFile
bomContentReader = csv.DictReader(open(bomFile))
bomList = [row for row in bomContentReader]
    
# Open the master parts list and read the dictionary.
#partsDBFile = 'PartsDatabase.csv'
partsDBFile = sys.argv[2]
print 'Reading parts list file ', partsDBFile
partsListReader = csv.DictReader(open(partsDBFile))
# This gives us a list of dictionaries in the master parts list:
partsList = [row for row in partsListReader]

# This is a list of dictionaries which for each part have the refdes, the vendor P/N and the vendor.
# The dictionary is refdes, value, footprint, datasheet, part number
lookupList = []

# Now the BOM and the parts list are in memory.
# Cycle through the BOM and pull the part number for each component.
for bomEntry in bomList:
    print 'This BOM entry is', bomEntry
    RefDes = bomEntry['Reference'] 
    Value = bomEntry[' Value']
    Footprint = bomEntry[' Footprint']
    Datasheet = bomEntry[' Datasheet']
    PartNum = bomEntry[' PN']
    print RefDes, Value, Footprint, Datasheet, PartNum

    # Some parts (capacitors, resistors, etc) have the base part type and number with the value added as
    # the suffix. For those parts, the part number won't have a dash suffix. That suffix comes from the part
    # value. So add it if necessary.
    if RefDes[0] == 'C' or RefDes[0] == 'L' or RefDes[0] == 'R' or RefDes[0] == 'Y':
        PartNum = PartNum + '-' + Value
        print 'New part number is', PartNum
    # Check the existing lookup list for the part. Test the part number.
    # If it doesn't exist, add it to the list, with a count of 1 and make sure
    # that the refdes list is initialized with the current refdes. If it does
    # exist, increment the count and add this refdes to the list.
    if not lookupList:
        # list is empty, just add this part to it.
        #print '****Initializing lookupList'
        refdesList = [RefDes]
        thisEntry = {'PartNum': PartNum, 'value': Value, 'count': 1, 'RefDesList': refdesList}
        lookupList.append(thisEntry)
    else:
        # list is not empty. Go through it looking to see if our part number is already in it.
        gotIt = False
        for thisPart in lookupList:
            if thisPart['PartNum'] == PartNum:
                thisPart['count'] += 1
                thisPart['RefDesList'].append(RefDes)
                #print 'Part already in list. New entry: ', thisPart
                gotIt = True
                break

        if gotIt == False:
            refdesList = [RefDes]
            thisEntry = {'PartNum': PartNum, 'value': Value, 'count': 1, 'RefDesList': refdesList}
            lookupList.append(thisEntry)
#           print 'Added ', thisEntry

# Now we've got a list of all of the part numbers with the count of each as well as the relevant refdeses.
# Match the company part number with the orderable part number.
finalBomList = []
totalCost = 0.0
for thisPart in lookupList:
    for part in partsList:
        if part['Part Number'] == thisPart['PartNum']:
            #print 'Match!'
            #print 'Vendor and part number: ', part['Vendor'], part['Vendor P/N']
            # The parts database includes a price per part, pull that and multiply by the count so we can get a price guesstimate.
            # We add the running total cost to the end, because I don't know how to put it in the file at the end as a separate line.
            price = part['Price Each (qty 25)']
            cost = float(price.strip("$")) * float(thisPart['count'])
            totalCost = totalCost + cost
            # Add this part to the list of all parts/vendors/part numbers.
            finalBomList.append({'Part Number': thisPart['PartNum'], 'count': thisPart['count'], 'Vendor P/N': part['Vendor P/N'], 'Value': thisPart['value'], 'Vendor': part['Vendor'],'RefDesList': thisPart['RefDesList'], 'ext. cost': cost, 'total cost': totalCost})
            break;
    else:
        # part was not found!
        finalBomList.append({'Part Number': thisPart['PartNum'], 'count': thisPart['count'], 'Vendor P/N': '????', 'Value': thisPart['value'], 'Vendor': '????', 'RefDesList': thisPart['RefDesList'], 'ext. cost': 0, 'total cost': totalCost})

# write it to the result csv file.
finalBomFile = 'FinalBom.csv'
fieldNames = ['Part Number', 'count', 'Vendor P/N', 'Value', 'Vendor', 'RefDesList', 'ext. cost', 'total cost']
print 'Writing BOM file ', finalBomFile
f = open(finalBomFile, 'wb')
writer = csv.DictWriter(f, delimiter=',', fieldnames=fieldNames)
writer.writerow(dict((fn,fn) for fn in fieldNames))
for item in finalBomList:
    writer.writerow(item)
f.close()
print 'DONE!'
